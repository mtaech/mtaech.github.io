---
title: "Java DateTimeFormatter 初识（一）  "
date: 2022-01-05T14:17:08+08:00
draft: true
---

每年的年初总是能看到 Java 程序员因为混用 "yyyy" 和 "YYYY" 导致转换出来的时间年份不对的情况。想一想我自己也不是很了解 Java
时间转换格式字符代表的意思，每次都是 'yyyy-MM-dd HH:mm:ss' 老格式万年不变。

今天趁着有空闲时间看了 Java8 [[https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns][DateTimeFormatter]] 的文档总算对 Java 的时间格式有了基本的认识，这里做个笔记记录一下。

* 时间格式化字符串定义
   
| 格式字符 | 意义                       | 描述         | 例子                                             |
| G        | era                        | text         | AD; Anno Domini; A                               |
| u        | year                       | year         | 2004; 04                                         |
| y        | year-of-era                | year         | 2004; 04                                         |
| D        | day-of-year                | number       | 189                                              |
| M/L      | month-of-year              | number/text  | 7; 07; Jul; July; J                              |
| d        | day-of-month               | number       | 10                                               |
| Q/q      | quarter-of-year            | number/text  | 3; 03; Q3; 3rd quarter                           |
| Y        | week-based-year            | year         | 1996; 96                                         |
| w        | week-of-week-based-year    | number       | 27                                               |
| W        | week-of-month              | number       | 4                                                |
| E        | day-of-week                | text         | Tue; Tuesday; T                                  |
| e/c      | localized day-of-week      | number/text  | 2; 02; Tue; Tuesday; T                           |
| F        | week-of-month              | number       | 3                                                |
| a        | am-pm-of-day               | text         | PM                                               |
| h        | clock-hour-of-am-pm (1-12) | number       | 12                                               |
| K        | hour-of-am-pm (0-11)       | number       | 0                                                |
| k        | clock-hour-of-am-pm (1-24) | number       | 0                                                |
| H        | hour-of-day (0-23)         | number       | 0                                                |
| m        | minute-of-hour             | number       | 30                                               |
| s        | second-of-minute           | number       | 55                                               |
| S        | fraction-of-second         | fraction     | 978                                              |
| A        | milli-of-day               | number       | 1234                                             |
| n        | nano-of-second             | number       | 987654321                                        |
| N        | nano-of-day                | number       | 1234000000                                       |
| V        | time-zone ID               | zone-id      | America/Los_Angeles; Z; -08:30                   |
| z        | time-zone name             | zone-name    | Pacific Standard Time; PST                       |
| O        | localized zone-offset      | offset-O     | GMT+8; GMT+08:00; UTC-08:00;                     |
| X        | zone-offset 'Z' for zero   | offset-X     | Z; -08; -0830; -08:30; -083015; -08:30:15;       |
| x        | zone-offset                | offset-x     | +0000; -08; -0830; -08:30;   -083015; -08:30:15; |
| Z        | zone-offset                | offset-Z     | +0000; -0800; -08:00;                            |
| p        | pad next                   | pad modifier | 1                                                |
| '        | escape for text            | delimiter    |                                                  |
| ''       | single quote               | literal      | '                                                |
| [        | optional section start     |              |                                                  |
| ]        | optional section end       |              |                                                  |
| #        | reserved for future use    |              |                                                  |
| {        | reserved for future use    |              |                                                  |
| }        | reserved for future use    |              |                                                  |


* 年份格式
   和年份有关的格式化字符有 4 个分别是: G,u,y,Y
   
** G：纪年标志
    G 显示是公元前还是公元后。要注意的是：不存在公元前零年，或者公元后
    零年。年份从一开始，年份值为零时对应的是公元前一年
#+begin_src java
  DateTimeFormatter formatterCN = DateTimeFormatter.ofPattern("G yyyy", Locale.CHINA);
  DateTimeFormatter formatterEn = DateTimeFormatter.ofPattern("G yyyy", Locale.US);
  formatterCN.format(LocalDate.now());//结果：公元 2022
  formatterCN.format(LocalDate.of(0,1,1));//结果：公元前 0001
  formatterEn.format(LocalDate.now());//结果：AD 2022
  formatterEn.format(LocalDate.of(0,1,1));//结果：BC 0001
#+end_src

** u，y，Y：年份标志
   
*** prolptic-year：u/Y 和 year-of-ear：y 的差别
u，y，Y 都是年份格式字符串。但是区别在于 u/Y 是 prolptic-year y 属于
year-of-era。二者的差别可详见 [[https://stackoverflow.com/questions/29014225/what-is-the-difference-between-year-and-year-of-era][Stack Overflow]]。

简略的来说 u/Y 在年份为公元前时会将年份转换为从零开始的负数，而 y 在
转换公元前的年份时则是从一开始递增。

#+begin_src java
DateTimeFormatter formatter =
                DateTimeFormatter.ofPattern("'proleptic-year:' u Y '-- era-year:' y G");
formatter.format(LocalDate.of(2,3,1));结果：//proleptic-year: 2 2  -- era-year: 2 公元
formatter.format(LocalDate.of(1,3,1));结果://proleptic-year: 1 1  -- era-year: 1 公元
formatter.format(LocalDate.of(0,3,1));结果：//proleptic-year: 0 0  -- era-year: 1 公元前
formatter.format(LocalDate.of(-1,3,1));结果：//proleptic-year: -1 -1  -- era-year: 2 公元前
#+end_src

*** year-of-ear：y 和 week-based-year：Y 的差别
y 和 Y 的差别在于第一周存在跨年时 YYYY 会根据 [[https://docs.oracle.com/javase/8/docs/api/java/time/temporal/WeekFields.html][WeekFields]] 中 firstDayOfWeek(每周
第一天) 和 minimalDays(当年第一周天数最小数) 属性值来计算跨年周属于哪一年。从每
周第一天开始计算如果在新年的天数大于等于第一周天数最小数那么跨年周属于新年的第一
周，否则属于旧年的最后一周。DateTimeFormatter 中 WeekFields 上述两个字段的默认
值由 [[https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html][Locale]] 决定。WeekFields 默认有两种规则 ISO（起始天为周一，第一周最少 4 天）
和 SUNDAY_START（起始天为周四，第一周最少 1 天） 。
   
#+begin_src java 
  LocalDate date = LocalDate.of(2022, 1, 1);
  DateTimeFormatter formatterUK =
      DateTimeFormatter.ofPattern("YYYY-MM-dd ww", Locale.UK);
  DateTimeFormatter formatterCN =
      DateTimeFormatter.ofPattern("YYYY-MM-dd ww",Locale.CHINA);
  System.out.printf("中国时间:%s \n",formatterCN.format(date));//结果：中国时间：2022-01-01 01
  System.out.printf("英国时间:%s\n",formatterUK.format(date));//结果：英国时间：2021-01-01 52
#+end_src




    
    
   
   
