---
title: "Java Arrays Sort Learn"
date: 2021-12-29T01:00:45+08:00
draft: true
---

** 提要
开始刷 leetcode 的简单题，碰到一道按频率将数组升序排序的[[https://leetcode-cn.com/problems/sort-array-by-increasing-frequency/][题目]]。
令人难过的是我想了半小时的解题代码，结果很令人失望：执行用时 13ms ，内存消耗39.1。
而更令我寒心的是解题前几位的代码我连看都看不懂。
下面是我的代码，又臭又长，很是难看。
#+BEGIN_SRC java
class Solution {
    public int[] frequencySort(int[] nums) {
       Map<Integer,Integer> frequencyMap = new HashMap<>();
        Arrays.stream(nums).forEach(num ->{
            Integer freq = frequencyMap.getOrDefault(num, 0);
            frequencyMap.put(num,++freq);
        });
        Integer[][] freqArr = new Integer[nums.length][0];
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            Integer[] ints = freqArr[--value];
            List<Integer> lists = new ArrayList<>();
            lists.addAll(List.of(ints));
            lists.add(key);
            lists.sort(Comparator.reverseOrder());
            ints = lists.toArray(new Integer[lists.size()]);
            freqArr[value] = ints;
        }

        List<Integer> resultList = new ArrayList<>();
        Arrays.stream(freqArr).forEach(ints ->{
          if (ints != null && ints.length>0){
              resultList.addAll(Arrays.asList(ints)) ;
          }
        });
        List<Integer> finalList = new ArrayList<>();
        resultList.forEach(num->{
            Integer len = frequencyMap.getOrDefault(num, 0);
            for (int i = 0; i < len; i++) {
                finalList.add(num);
            }
        });

        return finalList.stream().mapToInt(Integer::intValue).toArray();
    }
}
#+END_SRC

下面是我找的优秀解题思路
#+begin_src java
class Solution {
    public int[] frequencySort(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int num : nums){
            map.put(num,map.getOrDefault(num,0) + 1);
        }

        //转化为Integer[] 数组
        Integer[] integers = Arrays.stream(nums).boxed().toArray(Integer[]::new);

        //自定义排序
        Arrays.sort(integers, (a, b) -> map.get(a)==map.get(b)? b-a :map.get(a)-map.get(b));

        //转化为int[] 数组
        return Arrays.stream(integers).mapToInt(Integer::valueOf).toArray();
    }
}
#+end_src


